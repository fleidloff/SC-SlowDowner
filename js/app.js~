/*// Check for the various File API support.
if (window.File && window.FileReader && window.FileList && window.Blob) {
  // Great success! All the File APIs are supported.
} else {
  alert('The File APIs are not fully supported in this browser.');
}*/

// global sound stuff
var mySound;
var buttonsHTML;
var selection;
var loopFile;
var volume;
var fred;

head.js("js/jquery-1.9.1.js", "js/buzz.js", "js/jquery-ui-1.10.1.custom.js",  function() {	
	//mySound = new buzz.sound("hubba.mp3");
	mySound = new buzz.sound("https://dl.dropbox.com/u/5100494/tanga.mp3");
	buttonsHTML = $('#buttons').html();
	init();
});

// init functions
function init() {
	initFileDragDrop('#title');
	initVolumeSlider('#volume');
	initSpeedSlider('#speed');
	initProgressSlider('#progress');
	initSelectionSlider('#selection');
	//initLoadingBar('#loading');
	initButtons('#buttons');
	initTimeUpdateHandle();
}

function initTimeUpdateHandle() {
		
	mySound.bind("timeupdate", function(e) {
		var timer = buzz.toTimer(this.getTime());
		console.log("time: " + timer);
		
		console.log("getTime: " + this.getTime() + " [1]: " + selection.slider('values')[1] * mySound.getDuration() / 100);
		if ((this.getTime() > (selection.slider('values')[1] * mySound.getDuration() / 100)) || (mySound.isEnded())) {
			if (loopFile) {
				console.log("repeat");
				mySound.setTime(selection.slider('values')[0] * mySound.getDuration() / 100).fadeTo(volume, 1500);
			}
			
		}
	});
}

function initButtons(id) {
	$('#buttons').html(buttonsHTML);
    $( "#rewind" ).button({
		text: false,
		icons: {
			primary: "ui-icon-seek-prev"
		}
	})
		.click(function() {
			mySound.setTime(selection.slider('values')[0] * mySound.getDuration() / 100).fadeTo(volume, 1500);
		});
	$( "#open" ).button({
		text: false,
		icons: {
			primary: "ui-icon-folder-open"
		}
	}).click(function() {
		console.log("open");
		$('#files').trigger('click');
	});
    $( "#play" ).button({
		text: false,
		icons: {
			primary: "ui-icon-play"
		}
    })
		.click(function() {
			var options;
			if ( $( this ).text() === "play" ) {
				play();
				console.log("play");
				options = {
					label: "pause",
					icons: {
						primary: "ui-icon-pause"
					}
				};
			} else {
				pause();
				options = {
					label: "play",
					icons: {
						primary: "ui-icon-play"
					}
				};
			}
			$( this ).button( "option", options );
		});
    $( "#stop" ).button({
		text: false,
		icons: {
			primary: "ui-icon-stop"
		}
    })
		.click(function() {
			stop();
			$( "#play" ).button( "option", {
				label: "play",
				icons: {
					primary: "ui-icon-play"
				}
			});
		});
    $("#loop").button({
		text: false,
		icons: {
			primary: "ui-icon-refresh"
		}
	})
		.click(function() {
			if ($(this).is(":checked")) {
				loop(true);
			} else {
				loop(false);
			}
		});
	loop(true);
	$('#loop').attr('checked','checked').button("refresh");
}

function initFileDragDrop(id) {
	$('#files').bind('change', handleFileSelect);
	$(id).bind('dragover', handleDragOver);
	$(id).bind('drop', handleDnDFileSelect);
}

function initSpeedSlider(id) {
	$(id + ' .tooltip').hide();

    $(id).slider({
		orientation: "horizontal",
		range: "min",
		min: 50,
		max: 300,
		step: 1,
		value: 100,
		slide: function( event, ui ) {
			console.log("speed: " + ui.value);
			mySound.setSpeed(ui.value / 100);
			var value = (($(id).slider('value') - 50) * 2.5 / 2.5) - 10;
			$(id + ' .tooltip').css('left', value).text(ui.value + '%');  
		},
		change: function( event, ui ) {
			console.log("speed: " + ui.value);
			mySound.setSpeed(ui.value / 100);
			var value = (($(id).slider('value') - 50) * 2.5 / 2.5) - 10;
			$(id + ' .tooltip').css('left', value).text(ui.value + '%');  
		},
		start: function(event,ui) {
			$(id + ' .tooltip').fadeIn('fast');
		},
		stop: function(event,ui) {
			$(id + ' .tooltip').fadeOut('fast');
		},			
    });
}

function initSelectionSlider(id) {
	$(id + ' .tooltip').hide();

    selection = $(id).slider({
		orientation: "horizontal",
		range: true,
		min: 0,
		max: 100,
		step: 0.1,
		values: [0, 53],
		change: function( event, ui ) {
			//console.log("position: " + ui.value);
			//mySound.setTime(buzz.fromPercent(ui.value, mySound.getDuration()));			
			var value = ((ui.value - 0.0) * 500 / 100) - 10;
			$(id + ' .tooltip').css('left', value).text(buzz.toTimer(mySound.getDuration() * ui.value / 100));  
		},
		slide: function( event, ui ) {
			console.log("position: " + ui.value);
			//mySound.setTime(buzz.fromPercent(ui.value, mySound.getDuration()));			
			var value = ((ui.value - 0.0) * 500 / 100) - 10;
			$(id + ' .tooltip').css('left', value).text(buzz.toTimer(mySound.getDuration() * ui.value / 100));  
		},
		start: function(event,ui) {
			$(id + ' .tooltip').fadeIn('fast');
		},
		stop: function(event,ui) {
			$(id + ' .tooltip').fadeOut('fast');
		},	
    });
}

/*function initLoadingBar(id) {
	$(id).progressbar({
		value: 0,
		change: function() {
			
		},
		complete: function() {
			
		}
    });
	
	//$(id).progressbar( "value", val + 1 );
	//audio.buffered.end(0)
	mySound.bind("progress", function(e) {
		var buffered = mySound.getBuffered();
		if (buffered[0]) {
			var percent = buzz.toPercent(buffered[0].end, mySound.getDuration());
			console.log("buffered: " + buffered[0].end + " p: " + percent);
			$(id).progressbar("value", percent + 1);
		}
	});
}*/

function initProgressSlider(id) {
	$(id + ' .tooltip').hide();

    $(id).slider({
		orientation: "horizontal",
		range: "min",
		min: 0,
		max: 100,
		step: 0.1,
		step: 0.1,
		value: 0,
		change: function( event, ui ) {
			//console.log("position: " + ui.value);
			//mySound.setTime(buzz.fromPercent(ui.value, mySound.getDuration()));			
			var value = (($(id).slider('value') - 0.0) * 500 / 100) - 10;
			$(id + ' .tooltip').css('left', value).text(buzz.toTimer(mySound.getDuration() * ui.value / 100));  
		},
		slide: function( event, ui ) {
			console.log("position: " + ui.value);
			mySound.setTime(buzz.fromPercent(ui.value, mySound.getDuration()));			
			var value = (($(id).slider('value') - 0.0) * 500 / 100) - 10;
			$(id + ' .tooltip').css('left', value).text(buzz.toTimer(mySound.getDuration() * ui.value / 100));  
		},
		start: function(event,ui) {
			$(id + ' .tooltip').fadeIn('fast');
		},
		stop: function(event,ui) {
			$(id + ' .tooltip').fadeOut('fast');
		},	
    });
	mySound.bind("timeupdate", function(e) {
		var percent = buzz.toPercent(this.getTime(), this.getDuration());
		console.log("update slider position: " + percent);
		$(id).slider("value", percent);
	});
}

function initVolumeSlider(id) {
	$(id + ' .tooltip').hide();
	$(id + ' .tooltip').css('left', -10); 
	
	volume = 80;
	mySound.setVolume(volume);
	
    $(id).slider({
		orientation: "vertical",
		range: "min",
		min: 0,
		max: 100,
		value: 80,
		change: function( event, ui ) {
			//console.log("position: " + ui.value);
			//mySound.setTime(buzz.fromPercent(ui.value, mySound.getDuration()));			
			var value = 200 - (($(id).slider('value') - 0.0) * 2 / 1)- 40;
			$(id + ' .tooltip').css('top', value).text(ui.value);
		},
		slide: function( event, ui ) {
			console.log("volume: " + ui.value);
			mySound.setVolume(ui.value);		
			volume = ui.value;
			var value = 200 - (($(id).slider('value') - 0.0) * 2 / 1)- 40;
			$(id + ' .tooltip').css('top', value).text(ui.value);  
			
		},
		start: function(event,ui) {
			$(id + ' .tooltip').fadeIn('fast');
		},
		stop: function(event,ui) {
			$(id + ' .tooltip').fadeOut('fast');
		},
    });
}

// player functions

function play() {
	mySound.play();
}

function stop() {
	mySound.stop();
}

function pause() {
	mySound.pause();
}

function loop(loopValue) {
	//if (loopValue) {
	//	mySound.loop();
	//} else {
	//	mySound.unloop();
	//}
	loopFile = loopValue;
}

function loadSound(file) {
	
	console.log("playSound");
	// how to load local ressource
	mySound.stop();
	mySound = new buzz.sound(file);
	init();
	//mySound.setSpeed(2);
	//mySound.play();
}

function readFile(file) {
	
	var reader = new FileReader();

	// Closure to capture the file information.
	reader.onload = (function(f) {
		return function(e) {
			console.log("fileName: " + f.name);
			$("div#title").html(f.name + " (" + f.type + ", " + Math.floor((f.size/1024)) + " kb)");
			loadSound(e.target.result);
		};
	})(file);

	// Read in the image file as a data URL.
	reader.readAsDataURL(file);
}

function handleDnDFileSelect(evt) {
	evt = evt.originalEvent;
    evt.stopPropagation();
    evt.preventDefault();

    var files = evt.dataTransfer.files; // FileList object.
	var file = files[0];

	readFile(file);
  }

function handleDragOver(evt) {
	evt = evt.originalEvent;
    evt.stopPropagation();
    evt.preventDefault();
    evt.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.
	//evt.target.addClass("dragOver");
  }

function handleFileSelect(evt) {
	var files = evt.target.files; // File object
	var file = files[0];

	readFile(file);
}
